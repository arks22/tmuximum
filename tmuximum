#!/usr/bin/env bash

function tmuximum::help() {
  echo "tmuximum: Usage"
  echo "$ tmuximum [OPTION]"
  echo "OPTIONS : \"-h\" --> Display help message (this message)"
  echo "          \"-s\" --> Start kill-session mode"
  echo "          \"-w\" --> Start kill-window mode"
  echo "To quit tmuximum, press esc"
}

function tmuximum::operation() {
  answer=$(tmuximum::operation-list | "${filter[@]}" )
  case $answer in
    *new\ session* ) tmux new-session ;;
    *new\ window* ) tmux new-window ;;
    "kill sessions" ) tmuximum::kill-session ;;
    "kill windows" ) tmuximum::kill-window ;;
    *switch* ) tmux select-window -t $(echo  "$answer" | awk '{print $4}' | sed "s/://g") ;;
    *attach* ) tmux attach -t $(echo "$answer" | awk '{print $4}' | sed 's/://') ;;
    "detach" ) tmux detach-client ;;
  esac
}

function tmuximum::operation-list() {
  if [ -z $TMUX ]; then
    tmux list-sessions 2>/dev/null | while read line; do
      [[ ! "$line" =~ "attached" ]] || line="${GREEN}$line${DEFAULT}"
      echo -e "${GREEN}attach${DEFAULT} ==> [ "$line" ]"
    done
    echo -e "${GREEN}attach${DEFAULT} ==> [ ${BLUE}new session${DEFAULT} ]"
  else
    tmux list-windows | sed "/active/d" | while read line; do
      echo -e "${CYAN}switch${DEFAULT} ==> [ $(echo $line | awk '{print $1 " " $2 " " $3 " " $4 " " $5}') ]"
    done
   echo -e "${CYAN}switch${DEFAULT} ==> [ ${BLUE}new window${DEFAULT} ]"
    echo "detach"
    if (( $(tmux display-message -p '#{session_windows}') > 1 )); then
      echo -e "${RED}kill windows${DEFAULT}" 
    fi
  fi
  tmux has-session 2>/dev/null && echo -e "${RED}kill sessions${DEFAULT}"
}

function tmuximum::kill-session() {
  if [[ $filter[1] == "fzf-tmux" ]] || [[ $filter[1] == "fzf" ]]; then
    answer=$(tmuximum::kill-session-list | "${multi_filter[@]}")
  else
    answer=$(tmuximum::kill-session-list | "${filter[@]}")
  fi

  case $answer in
    *kill*Server* ) tmux kill-server ; tmuximum::operation ;;
    *kill*windows* )
      echo $answer | while read -r session; do
        tmux kill-session -t $(echo $session | awk '{print $4}' | sed "s/://g")
      done
    ;;
  "back" ) tmuximum::operation
  esac
}

function tmuximum::kill-session-list() {
  list_sessions=$(tmux list-sessions 2>/dev/null);
  echo "$list_sessions" | while read line; do
    [[ "$line" =~ "attached" ]] && line="${GREEN}"$line"${DEFAULT}"
    echo -e "${RED}kill${DEFAULT} ==> [ "$line" ]"
  done
  [ $(echo "$list_sessions" | grep -c '')  = 1 ] || echo -e "${RED}kill${DEFAULT} ==> [ ${RED}Server${DEFAULT} ]"
  echo -e "${BLUE}back${DEFAULT}"
}

function tmuximum::kill-window() {
  if (( $(tmux display-message -p '#{session_windows}') > 1 )); then
    if [[ $filter[1] == "fzf-tmux" ]] || [[ $filter[1] == "fzf" ]]; then
      answer=$(tmuximum::kill-window-list | "${multi_filter[@]}")
    else
      answer=$(tmuximum::kill-window-list | "${filter[@]}")
    fi

    if [[ "$answer" =~ "kill" ]]; then
      echo $answer | while read -r window; do
        tmux kill-window -t $(echo $window | awk '{print $4}' | sed "s/://g")
      done
      tmuximum::kill-window
    elif [[ $answer = "back" ]]; then
      tmuximum::operation
    fi
  else
    tmuximum::operation
  fi
}

function tmuximum::kill-window-list() {
  tmux list-windows | while read line ; do
    line="$(echo $line | awk '{print $1 " " $2 " " $3 " " $4 " " $5 " " $9}')"
    [[ $line =~ "active" ]] && line="${GREEN}$line${DEFAULT}"
    echo -e " ${RED}kill${DEFAULT} ==> [ $line ]"
  done
  echo -e "${BLUE}back${DEFAULT}"
}

function set-color() {
  if [[ "${filter[@]}" =~ "fzf" ]]; then
    readonly BLACK="\033[30m"
    readonly RED="\033[31m"
    readonly GREEN="\033[32m"
    readonly YELLOW="\033[33m"
    readonly BLUE="\033[34m"
    readonly MAGENTA="\033[35m"
    readonly CYAN="\033[36m"
    readonly WHITE="\033[37m"
    readonly BOLD="\033[1m"
    readonly DEFAULT="\033[m"
  fi
}

function set-filter() {
  filters="fzf-tmux:fzf:peco:percol:gof"
  while [[ -n $filters ]]; do
  filter=${filters%%:*}
    if type "$filter" >/dev/null 2>&1; then
      [[ "$filter" = "fzf" ]] && filter=($filter --ansi --prompt="tmuximum >") && multi_filter=($filter --multi --ansi --prompt="tmuximum >")
      [[ "$filter" = "fzf-tmux" ]] && filter=($filter -r --ansi --prompt="tmuximum >") && multi_filter=($filter --multi --ansi --prompt="tmuximum >")
      return 0
    else
      filters="${filters#*:}"
    fi
  done
  echo "tmuximum: tmuximum requires fuzzy finder. Either of these is necessary." 1>&2
  echo "fzf, fzf-tmux, peco, percol, gof" 1>&2
  exit 1
}

function main() {
  set-filter
  set-color
  if [[ $# = 0 ]]; then
    tmuximum::operation
  elif [[ $# = 1 ]]; then
    case $1 in
      "-h" ) tmuximum::help ;;
      "-s" ) tmuximum::kill-session ;;
      "-w" ) tmuximum::kill-window ;;
      * ) echo "tmuximum: illegal option $1" 1>&2 && exit 1 ;;
    esac
  else
    echo "tmuximum: option must be one" 1>&2 && exit 1
  fi
}

main $@
